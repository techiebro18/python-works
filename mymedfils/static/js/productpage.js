// @hash v3-06D33580B84BB18595EA51F72D19071B21C1354C
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 11/22/2020 2:31:38 AM
///////////////////////////////////////////////////////////////////////////////
var ProductPageBlock = React.createClass({
	displayName: "ProductPageBlock",
	getInitialState: function getInitialState() {
		return { mobile: this.props.localdata.devicetype == "desktop" ? false : true };
	},
	componentDidMount: function componentDidMount() {
		if (window.matchMedia("(min-width: 1024px)").matches == true) {
			this.setState({ mobile: false });
		}
		if (this.state.mobile == true) {
			waveinitialize();
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "hm-container" },
			React.createElement(BreadCrumbs, { datalist: this.props.datalist }),
			React.createElement(ProductSummaryBlock, { datalist: this.props.datalist, mobile: this.state.mobile }),
			this.state.mobile == true ? React.createElement(
				"div",
				{ className: "downloadAppAdv", style: { marginBottom: "20px" } },
				React.createElement(
					"a",
					{ href: "https://play.google.com/store/apps/details?id=com.healthmug" },
					React.createElement("img", { src: "https://static.oxinis.com/healthmug/image/asset/135-tc-480.png" })
				)
			) : null,
			this.state.mobile == true ? React.createElement(ProductDeliveryTime, { idcode: this.props.datalist.productinfo.id_code, loggedin: this.props.datalist.loggedin }) : null,
			this.state.mobile == true ? React.createElement(MobileSocialShare, { info: this.props.datalist.productinfo }) : null,
			React.createElement(SimilarCombo, { datalist: this.props.datalist, localdata: this.props.localdata, mobile: this.state.mobile }),
			this.state.mobile == true ? React.createElement(PageFooter, null) : null,
			React.createElement("div", { className: "clearfix" }),
			React.createElement("br", null),
			this.props.datalist.qa.questions.length > 0 ? React.createElement(ModalAnswerForm, { datalist: this.props.datalist, localdata: this.props.localdata }) : null,
			React.createElement(ModalQuestionForm, { idcode: this.props.datalist.productinfo.id_code }),
			this.state.mobile == true ? React.createElement(NotifyMobileModal, { datalist: this.props.datalist }) : null,
			React.createElement(ProductBoxKeyFeatureModal, null),
			this.props.datalist.diseases.length > 0 ? React.createElement(ProductUsesModal, { diseases: this.props.datalist.diseases, disease: this.props.localdata.selecteddisease }) : null
		);
	}
});

var BreadCrumbs = React.createClass({
	displayName: "BreadCrumbs",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "breadcrumbs", itemScope: true, itemType: "http://schema.org/BreadcrumbList" },
			React.createElement(
				"div",
				{ itemProp: "itemListElement", itemScope: true, itemType: "http://schema.org/ListItem" },
				React.createElement(
					"a",
					{ itemProp: "item", href: "/" },
					React.createElement(
						"span",
						{ itemProp: "name" },
						"Home"
					),
					" ",
					React.createElement("meta", { itemProp: "position", content: "1" })
				)
			),
			this.props.datalist.breadcrumbs.map(function (breadcrumb, i) {
				return React.createElement(
					"div",
					{ key: i },
					React.createElement("i", { className: "fa fa-angle-right" }),
					" ",
					React.createElement(
						"div",
						{ itemProp: "itemListElement", itemScope: true, itemType: "http://schema.org/ListItem" },
						React.createElement(
							"a",
							{ itemProp: "item", href: breadcrumb.link },
							React.createElement(
								"span",
								{ itemProp: "name" },
								breadcrumb.name
							),
							React.createElement("meta", { itemProp: "position", content: i + 2 })
						)
					)
				);
			}),
			React.createElement("i", { className: "fa fa-angle-right" }),
			" ",
			React.createElement(
				"div",
				{ className: "active" },
				React.createElement(
					"span",
					null,
					this.props.datalist.productinfo.name
				)
			)
		);
	}
});

var ProductSummaryBlock = React.createClass({
	displayName: "ProductSummaryBlock",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "displayTable productInfo" },
			React.createElement(
				"div",
				{ className: "cellLeft" },
				React.createElement(
					"div",
					{ className: "displayTable" },
					React.createElement(ProductPageImg, { info: this.props.datalist.productinfo, mobile: this.props.mobile }),
					React.createElement(ProductPageSummary, { info: this.props.datalist.productinfo, datalist: this.props.datalist, mobile: this.props.mobile })
				)
			),
			React.createElement(
				"div",
				{ className: "cellRight", style: { backgroundColor: "#fafafa" } },
				React.createElement(ProductPageTrust, { datalist: this.props.datalist })
			)
		);
	}
});

init_images = function init_images() {
	$(".thumbImg").removeClass("selected");
	$(".imgMainItem").removeClass("currentImg");
	$(".thumbImgWrap #0").addClass("selected");
	$("#m_0").addClass("currentImg");
	if (window.matchMedia("(min-width: 1024px)").matches == true) {
		zoomImg();
	}
};

var ProductPageImg = React.createClass({
	displayName: "ProductPageImg",
	componentDidMount: function componentDidMount() {
		init_images();
		if ((this.props.info.images.length > 1 || typeof this.props.info.videos.url != "undefined") && window.matchMedia("(max-width: 768px)").matches == true) {
			$(".imgMain").owlCarousel({
				navigation: true, // Show next and prev buttons
				lazyLoad: true,
				slideSpeed: 300,
				paginationSpeed: 400,
				items: 1
			});
		}

		var imgMainItemList = document.querySelectorAll(".typeImage");

		Array.prototype.map.call(imgMainItemList, function (imgMainItem) {
			var img = new Image();
			var image = imgMainItem.querySelector("img");
			img.src = image.src;
			img.onload = function () {
				image.classList.add("loaded");
			};

			var imgLarge = new Image();
			imgLarge.src = imgMainItem.dataset.large;
			imgLarge.onload = function () {
				imgLarge.classList.add("loaded");
			};
			imgMainItem.appendChild(imgLarge);
		});
	},
	hideSelect: function hideSelect() {
		$(".customeSelectBox select").blur();
	},
	loadImageVideoSection: function loadImageVideoSection() {
		var image_videos = [];
		for (var i = 0; i < this.props.info.images.length; i++) {
			image_videos.push({ url: this.props.info.images[i], type: "image" });
		}if (typeof this.props.info.videos.url != "undefined") {
			var video = { url: this.props.info.videos, type: "video" };
			image_videos.splice(1, 0, video);
		}
		return image_videos;
	},
	render: function render() {
		var image_videos = this.loadImageVideoSection();
		return React.createElement(
			"div",
			{ className: this.props.info.quantity <= 0 ? "productDetailImg soldout" : "productDetailImg" },
			React.createElement(
				"div",
				{ className: "imgMain drift-demo-trigger", onMouseOver: this.hideSelect },
				image_videos.map(function (image, i) {
					return React.createElement(
						"div",
						{
							id: "m_" + i,
							className: image.type == "image" ? "typeImage imgMainItem" : "imgMainItem productVideo",
							"data-large": image.type == "image" ? "https://static.oxinis.com/healthmug/image/product/" + image.url + "-400.jpg" : "",
							"data-zoom": image.type == "image" ? "https://static.oxinis.com/healthmug/image/product/" + image.url + "-1000.jpg" : "",
							key: i
						},
						image.type == "image" ? React.createElement("img", { src: "https://static.oxinis.com/healthmug/image/product/" + image.url + "-30.jpg", className: "imgMainSmall", alt: this.props.info.name }) : React.createElement("iframe", { src: image.url.url + "?rel=0", allowfullscreen: "true", allowFullScreen: "allowfullScreen", frameBorder: "0" })
					);
				}, this)
			),
			this.props.info.prescription_required && !this.props.mobile ? React.createElement(
				"div",
				{ className: "prescriptionRequired" },
				React.createElement(
					"div",
					{ className: "rxWrap" },
					React.createElement(
						"svg",
						null,
						React.createElement("use", { xlinkHref: "/css/svgsprite.svg#rx" })
					)
				),
				React.createElement(
					"span",
					null,
					"Prescription Required"
				)
			) : null,
			this.props.mobile == true ? null : React.createElement(
				"div",
				{ className: "thumbImgWrap" },
				image_videos.length > 1 ? image_videos.map(function (thumb, i) {
					var image_url = thumb.type == "image" ? image_videos[i].url : image_videos[0].url;
					return React.createElement(
						"div",
						{ className: thumb.type == "image" ? "thumbImg" : "thumbImg thumbImgVideo", key: i, id: i },
						thumb.type == "image" ? null : React.createElement(
							"span",
							null,
							React.createElement("i", { className: "fa fa-caret-right" })
						),
						React.createElement("img", { src: "https://static.oxinis.com/healthmug/image/product/" + image_url + "-80.jpg", alt: this.props.info.name })
					);
				}, this) : null
			),
			this.props.info.quantity <= 0 ? React.createElement(
				"div",
				{ className: "imgMainSoldOut" },
				"Sold Out"
			) : null
		);
	}
});

var ProductPageSummary = React.createClass({
	displayName: "ProductPageSummary",
	showStock: function showStock() {
		if (this.props.info.quantity <= 5 && this.props.info.quantity > 0) return React.createElement(
			"span",
			{ className: "productInStock" },
			"Only ",
			this.props.info.quantity,
			" left at this price"
		);
	},
	showMRP: function showMRP() {
		if (this.props.info.mrp !== this.props.info.price) return React.createElement(
			"span",
			{ className: "productBoxMRP" },
			"MRP  ",
			React.createElement(
				"span",
				null,
				React.createElement("i", { className: "fa fa-rupee" }),
				" ",
				this.props.info.mrp
			)
		);
	},
	showDiscount: function showDiscount() {
		if (this.props.info.mrp !== this.props.info.price) return React.createElement(
			"span",
			{ className: "productBoxDiscount" },
			Math.round((this.props.info.mrp - this.props.info.price) / this.props.info.mrp * 100),
			"% Off"
		);
	},
	socialShare: function socialShare(network) {
		var winTop = screen.height / 2 - 350 / 2;
		var winLeft = screen.width / 2 - 520 / 2;
		var share_url = "";
		if (network == "fb") {
			gtag("event", "share", {
				method: "Facebook",
				content_type: "product",
				content_id: this.props.info.id_code.toString()
			});
			share_url = "https://www.facebook.com/dialog/share?app_id=145634995501895&display=popup&hashtag=%23Healthmug&href=" + window.location.href;
		} else if (network == "tw") {
			gtag("event", "share", {
				method: "Twitter",
				content_type: "product",
				content_id: this.props.info.id_code.toString()
			});
			share_url = "https://twitter.com/intent/tweet?text=Checkout " + this.props.info.name + " on Healthmug.com. " + window.location.href;
		}
		window.open(share_url, "sharer", "top=" + winTop + ",left=" + winLeft + ",toolbar=0,status=0,width=520,height=350");
	},
	render: function render() {
		var top_features = this.props.info.properties.filter(function (item) {
			return item.key_feature == true;
		});
		var prescription_required = this.props.info.prescription_required;
		return React.createElement(
			"div",
			{ className: "productDetailTopContent detail" },
			React.createElement(
				"div",
				{ className: "prodcutDetailTitle" },
				React.createElement(
					"h1",
					{ style: prescription_required && this.props.mobile ? { paddingRight: "40px", position: "relative" } : null },
					React.createElement(
						"span",
						null,
						this.props.info.name
					),
					prescription_required && this.props.mobile ? React.createElement(
						"div",
						{ className: "rxWrap", style: { position: "absolute", right: "0px", top: "3px" } },
						React.createElement(
							"svg",
							null,
							React.createElement("use", { xlinkHref: "/css/svgsprite.svg#rx" })
						)
					) : null
				),
				prescription_required ? React.createElement(
					"h2",
					null,
					this.props.info.brand.name
				) : this.props.info.tagline != "" ? React.createElement(
					"h2",
					null,
					this.props.info.tagline
				) : null,
				this.props.info.salt != "" ? React.createElement(
					"p",
					{ style: { marginTop: "5px", color: "#818181;" } },
					this.props.info.salt
				) : null,
				React.createElement(
					"span",
					{ className: "productDetailShare" },
					React.createElement("a", { onClick: this.socialShare.bind(this, "fb"), className: "fa fa-facebook socialIcon" }),
					" ",
					React.createElement("a", { onClick: this.socialShare.bind(this, "tw"), className: "fa fa-twitter socialIcon" }),
					" "
				)
			),
			React.createElement(
				"div",
				{ className: "ratingReviewQATop" },
				this.props.datalist.ratings.ratingcount > 0 && !this.props.info.prescription_required ? React.createElement(
					"div",
					null,
					React.createElement(
						"span",
						{ className: "avrgRating" },
						React.createElement("span", { className: "yellow-star", style: { width: this.props.datalist.ratings.avgrating * 20 + "%" } }),
						React.createElement("span", { className: "gray-star" })
					),
					React.createElement(
						"span",
						{ className: "rateCount" },
						React.createElement(
							"span",
							null,
							"(",
							this.props.datalist.ratings.avgrating,
							")"
						),
						this.props.datalist.ratings.ratingcount,
						" ",
						this.props.datalist.ratings.ratingcount == 1 ? "Rating" : "Ratings"
					)
				) : null,
				!prescription_required ? React.createElement(
					"div",
					null,
					this.props.datalist.reviews.reviewcount > 0 ? React.createElement(
						"a",
						{ className: "smoothScroll", "data-target": "#reviewRating" },
						this.props.datalist.reviews.reviewcount,
						" ",
						this.props.datalist.reviews.reviewcount == 1 ? "Review" : "Reviews"
					) : React.createElement(
						"a",
						{ className: "smoothScroll", "data-target": "#reviewRating" },
						"Be the first to Review"
					)
				) : null,
				this.props.datalist.qa.total_count > 0 ? React.createElement(
					"div",
					null,
					React.createElement(
						"a",
						{ className: "smoothScroll", "data-target": this.props.datalist.faq.length > 0 ? "#FAQWrap" : "#QAWrap" },
						"View Q&A"
					)
				) : null
			),
			React.createElement(
				"div",
				null,
				top_features.length > 0 ? React.createElement(
					"div",
					{ className: "itemFacts" },
					top_features.map(function (item) {
						return React.createElement(
							"div",
							{ className: "factBox" },
							React.createElement(
								"span",
								null,
								item.values[0]
							),
							React.createElement(
								"span",
								null,
								item.parent
							)
						);
					})
				) : null
			),
			React.createElement(
				"div",
				{ className: "priceOfferWrap" },
				React.createElement(
					"div",
					{ className: "productDetailPrice" },
					this.props.info.badges.length > 0 ? React.createElement(
						"div",
						{ className: "badges" },
						this.props.info.badges.map(function (badge) {
							return React.createElement(
								"div",
								{ key: badge.id },
								React.createElement("img", { src: "https://static.oxinis.com/healthmug/image/badge/" + badge.id + ".png", title: badge.name, alt: badge.name })
							);
						})
					) : null,
					this.showMRP(),
					React.createElement(
						"span",
						{ className: "productBoxSellingPrice", id: "productSP" },
						React.createElement("i", { className: "fa fa-rupee" }),
						" ",
						this.props.info.price
					),
					this.showDiscount(),
					this.props.mobile ? React.createElement(
						"span",
						{ className: "pull-right productTaxInfo" },
						"(Inclusive of all taxes)"
					) : null,
					this.showStock(),
					this.props.mobile ? null : React.createElement(
						"span",
						{ className: "productTaxInfo" },
						"(Inclusive of all taxes)"
					)
				),
				this.props.info.mrp >= 1000 ? null : React.createElement(ProductDetailOffer, { offers: this.props.info.offers })
			),
			React.createElement(ProductDetailVariants, { idcode: this.props.info.id_code, sizes: this.props.info.sizes, variants: this.props.info.attributes, info: this.props.info }),
			React.createElement(OrderBar, { stock: this.props.info.quantity, idcode: this.props.info.id_code, datalist: this.props.datalist }),
			this.props.mobile == true ? null : React.createElement(ProductDeliveryTime, { idcode: this.props.info.id_code, loggedin: this.props.datalist.loggedin, no_cod: this.props.info.no_cod }),
			this.props.mobile == true ? null : React.createElement(SoldOut, { stock: this.props.info.quantity, idcode: this.props.info.id_code, loggedin: this.props.datalist.loggedin })
		);
	}
});

var ProductDetailOffer = React.createClass({
	displayName: "ProductDetailOffer",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "offerDetail" },
			React.createElement(
				"p",
				{ className: "offerTitle" },
				"Offers Applicable"
			),
			this.props.offers.length > 0 ? React.createElement(
				"div",
				{ className: "offerContent" },
				React.createElement(
					"p",
					null,
					React.createElement("i", { className: "fa fa-tag" }),
					" ",
					React.createElement("span", null),
					" ",
					this.props.offers[0].details
				)
			) : null
		);
	}
});

var ProductDetailVariants = React.createClass({
	displayName: "ProductDetailVariants",
	imageReload: function imageReload() {
		if ((this.props.info.images.length > 1 || typeof this.props.info.videos.url != "undefined") && window.matchMedia("(max-width: 768px)").matches == true) {
			$(".imgMain").owlCarousel({
				navigation: true, // Show next and prev buttons
				lazyLoad: true,
				slideSpeed: 300,
				paginationSpeed: 400,
				items: 1
			});
		}
		var imgMainItemList = document.querySelectorAll(".typeImage");
		Array.prototype.map.call(imgMainItemList, function (imgMainItem) {
			var imgLarge = new Image();
			imgLarge.src = imgMainItem.dataset.large;
			imgLarge.onload = function () {
				imgLarge.classList.add("loaded");
			};

			imgMainItem.removeChild(imgMainItem.lastChild);
			imgMainItem.appendChild(imgLarge);
		});
	},
	clickHandle: function clickHandle(val) {
		if (val.active == true && val.id != this.props.idcode) {
			var that = this;
			nanobar.go(50);
			$(".overlay").css("display", "block");
			$.ajax({
				url: window.location.protocol + "//" + window.location.host + "/product/variantchange/" + val.id,
				success: function success(variantdata) {
					if ($(".imgMain .owl-stage-outer").length > 0) {
						$(".imgMain").data("owlCarousel").destroy();
					}
					store.dispatch({ type: "variantchange", data: JSON.parse(variantdata) });
					init_images();
					that.imageReload();
					nanobar.go(100);
					$(".overlay").css("display", "none");
				},
				error: function error(data) {
					alert(data.responseText);
					nanobar.go(100);
					$(".overlay").css("display", "none");
				}
			});
		}
	},
	changeVariant: function changeVariant(e) {
		var val = this.props.variants.values.filter(function (value) {
			return e.target.value == value.id;
		})[0];
		this.clickHandle(val);
	},
	calculateclass: function calculateclass(value) {
		var classname = "sizeBox";
		if (value.active == false) classname += " notInStock";
		if (value.id == this.props.idcode) classname += " selected";
		return classname;
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "row variantWrap" },
			this.props.sizes.length > 1 ? React.createElement(
				"div",
				{ className: typeof this.props.variants !== "undefined" && typeof this.props.variants.values !== "undefined" ? "col-xs-12 col-sm-6" : "col-xs-12 col-sm-12" },
				React.createElement(
					"div",
					{ className: "variantLabel" },
					"Select from available Sizes :"
				),
				React.createElement(
					"div",
					{ className: "variantContent" },
					this.props.sizes.map(function (value, i) {
						return React.createElement(
							"div",
							{ className: this.calculateclass(value), key: i, onClick: this.clickHandle.bind(this, value) },
							React.createElement(
								"span",
								null,
								value.name
							),
							React.createElement(
								"span",
								null,
								React.createElement("i", { className: "fa fa-rupee" }),
								" ",
								value.price
							)
						);
					}, this)
				)
			) : null,
			typeof this.props.variants !== "undefined" && typeof this.props.variants.values !== "undefined" ? React.createElement(
				"div",
				{ className: this.props.sizes.length > 1 ? "col-xs-12 col-sm-6" : "col-xs-12 col-sm-12" },
				this.props.variants.values.length > 0 ? React.createElement(
					"div",
					{ className: "variantLabel" },
					"Available " + this.props.variants.name + " :"
				) : null,
				this.props.variants.values.length <= 5 ? React.createElement(
					"div",
					{ className: "variantContent" },
					this.props.variants.values.map(function (value, i) {
						return React.createElement(
							"div",
							{ className: this.calculateclass(value), key: i, onClick: this.clickHandle.bind(this, value) },
							React.createElement(
								"span",
								null,
								value.name
							),
							React.createElement(
								"span",
								null,
								React.createElement("i", { className: "fa fa-rupee" }),
								" ",
								value.price
							)
						);
					}, this)
				) : React.createElement(
					"div",
					{ className: "variantContent" },
					React.createElement(
						"div",
						{ className: "customeSelectBox" },
						React.createElement(
							"select",
							{ value: this.props.idcode, onChange: this.changeVariant },
							this.props.variants.values.map(function (value, i) {
								return React.createElement(
									"option",
									{ value: value.id, disabled: !value.active, key: i },
									value.name,
									"   (Rs. ",
									value.price,
									")"
								);
							}, this)
						),
						React.createElement(
							"span",
							null,
							this.props.variants.name
						),
						React.createElement("i", { className: "fa fa-caret-down" })
					)
				)
			) : null
		);
	}
});

var ProductDeliveryTime = React.createClass({
	displayName: "ProductDeliveryTime",
	getInitialState: function getInitialState() {
		return { showblock: false, showinfo: false, showpincodeerror: false, errorvalue: "Please enter a valid pincode", showloader: false };
	},
	componentDidMount: function componentDidMount() {
		if (localStorage != null && localStorage.hasOwnProperty("pincode") === true && localStorage.pincode.length == 6) this.checkPincode(localStorage.pincode);else this.setState({ showblock: true });
	},
	checkPincode: function checkPincode(pincode) {
		if (pincode < 100000 || pincode > 999999) {
			this.setState({ showpincodeerror: true });
		} else {
			this.setState({ showloader: true });
			var that = this;
			$.ajax({
				url: window.location.protocol + "//" + window.location.host + "/products/checkcourier",
				type: "POST",
				data: { pincode: pincode, idcode: this.props.idcode },
				success: function success(data) {
					store.dispatch({ type: "updatepincode", pincode: pincode });
					data = JSON.parse(data);
					that.setState({ pincode: localStorage.pincode, showinfo: true, info: data, showpincodeerror: false, showblock: true, showloader: false });
				},
				error: function error(data) {
					that.setState({ showpincodeerror: true, errorvalue: data.responseText, showloader: false });
				}
			});
		}
	},
	checkPincodeEntry: function checkPincodeEntry(e) {
		if (e.keyCode == 13 || e.type == "click") this.checkPincode(this.refs.pincode.value);
		e.preventDefault();
	},
	changePincode: function changePincode() {
		this.setState({ showinfo: false });
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "mobileDeliverCheck" },
			React.createElement(
				"div",
				{ className: this.state.showblock == true ? "row availabilityWrap show" : "row availabilityWrap" },
				React.createElement(
					"div",
					{ className: "col-xs-12 col-lg-2" },
					React.createElement(
						"span",
						{ className: "label" },
						React.createElement("i", { className: "fa fa-map-marker" }),
						" Delivery"
					)
				),
				this.state.showinfo == false ? React.createElement(
					"div",
					{ className: "col-xs-12 col-lg-10" },
					React.createElement(
						"div",
						{ className: "checkAvailability" },
						React.createElement("input", {
							ref: "pincode",
							type: "number",
							onKeyUp: this.checkPincodeEntry,
							placeholder: "Enter Pincode",
							"aria-label": "Enter pincode to check availability",
							className: "noOutline",
							required: true
						}),
						React.createElement(
							"button",
							{ onClick: this.checkPincodeEntry },
							"Check",
							this.state.showloader == true ? React.createElement(
								"div",
								{ className: "productLoader", style: { display: "inline-block" } },
								React.createElement(
									"div",
									null,
									React.createElement(
										"div",
										null,
										React.createElement(
											"svg",
											null,
											React.createElement("use", { xlinkHref: "/css/svgsprite.svg#loader" })
										)
									)
								)
							) : null
						),
						React.createElement(
							"span",
							{ className: "availabilityResult" },
							" Generally delivered in 3 - 7 days"
						)
					),
					React.createElement(
						"div",
						{ className: "checkAvailability" },
						React.createElement(
							"div",
							null,
							this.state.showpincodeerror == true ? React.createElement(
								"span",
								null,
								this.state.errorvalue
							) : null
						)
					),
					React.createElement(
						"p",
						null,
						"Enter pincode to check estimated delivery time and COD availability"
					)
				) : React.createElement(
					"div",
					{ className: "col-xs-12 col-lg-10" },
					this.state.info.prepaid.service == true ? React.createElement(
						"div",
						{ className: "availabilityResult" },
						"Item is available at ",
						React.createElement(
							"span",
							null,
							this.state.pincode
						),
						"  ",
						" ",
						React.createElement(
							"a",
							{ onClick: this.changePincode, className: "brandtxtColor" },
							"Change"
						),
						React.createElement(
							"ul",
							null,
							React.createElement(
								"li",
								null,
								"Standard Delivery in ",
								this.state.info.prepaid.time,
								" - ",
								this.state.info.prepaid.time + 2,
								" day(s)",
								" "
							),
							this.state.info.cod.service == true && this.props.no_cod == false ? React.createElement(
								"li",
								null,
								"Cash on Delivery also available for this location @ ",
								React.createElement("i", { className: "fa fa-rupee" }),
								"50"
							) : React.createElement(
								"li",
								null,
								React.createElement(
									"span",
									{ className: "codNotApplicable" },
									"Cash on Delivery not applicable for this product"
								)
							),
							React.createElement(
								"li",
								null,
								"Guaranteed Refunds / Returns available within 15 days of delivery"
							)
						),
						React.createElement(
							"div",
							{ className: "availabilityResultNote" },
							"* Actual time may vary depending on other items in your order"
						)
					) : React.createElement(
						"div",
						{ className: "availabilityResult" },
						"Item is not available at ",
						React.createElement(
							"span",
							null,
							this.state.pincode
						),
						"  ",
						" ",
						React.createElement(
							"a",
							{ onClick: this.changePincode, className: "brandtxtColor" },
							"Change"
						)
					)
				)
			)
		);
	}
});

var OrderBar = React.createClass({
	displayName: "OrderBar",

	mixins: [cartmixin],
	cartAdd: function cartAdd(idcode) {
		gtag("event", "add_to_cart", {
			value: this.props.datalist.productinfo.price.toString(),
			currency: "INR",
			items: [{
				id: idcode.toString(),
				name: this.props.datalist.productinfo.name,
				category: this.props.datalist.breadcrumbs.map(function (crumb) {
					return crumb.name;
				}).toString(),
				brand: this.props.datalist.productinfo.brand.name,
				quantity: 1
			}]
		});
		fbq("track", "AddToCart", {
			content_name: this.props.datalist.productinfo.name,
			content_category: this.props.datalist.breadcrumbs.map(function (crumb) {
				return crumb.name;
			}).toString(),
			content_type: "product",
			content_ids: [idcode.toString()],
			value: this.props.datalist.productinfo.price,
			currency: "INR",
			brand: this.props.datalist.productinfo.brand.name
		});
		this.addtocart(idcode);
		this.loadcart(true);
	},
	componentDidMount: function componentDidMount() {
		this.setState({ flag: 1 });
	},
	getInitialState: function getInitialState() {
		return { flag: 0 };
	},
	addtocartButton: function addtocartButton() {
		if (this.state.flag == 1 && this.checkpresenceincart(this.props.idcode)) return React.createElement(
			"button",
			{ className: "btn size-lg addtoCartDisable wavelet", onClick: this.cartAdd.bind(this, this.props.idcode) },
			"Already in Cart"
		);else return React.createElement(
			"button",
			{ className: "btn btn-default btn-healthmugBorder size-lg openCart", onClick: this.cartAdd.bind(this, this.props.idcode) },
			"Add to Cart"
		);
	},
	buyNow: function buyNow(idcode) {
		gtag("event", "add_to_cart", {
			value: this.props.datalist.productinfo.price.toString(),
			currency: "INR",
			items: [{
				id: idcode.toString(),
				name: this.props.datalist.productinfo.name,
				category: this.props.datalist.breadcrumbs.map(function (crumb) {
					return crumb.name;
				}).toString(),
				brand: this.props.datalist.productinfo.brand.name,
				quantity: 1
			}]
		});
		fbq("track", "AddToCart", {
			content_name: this.props.datalist.productinfo.name,
			content_category: this.props.datalist.breadcrumbs.map(function (crumb) {
				return crumb.name;
			}).toString(),
			content_type: "product",
			content_ids: [idcode.toString()],
			value: this.props.datalist.productinfo.price,
			currency: "INR",
			brand: this.props.datalist.productinfo.brand.name
		});
		this.redirecttocheckout(idcode);
	},
	notifyMe: function notifyMe() {
		$("[data-remodal-id=notifyMeModal]").remodal({ hashTracking: false }).open();
	},
	render: function render() {
		return React.createElement(
			"div",
			null,
			this.props.stock > 0 ? React.createElement(
				"p",
				{ className: "productDetailBtnWrap" },
				React.createElement(
					"button",
					{ className: "btn btn-healthmug size-lg", onClick: this.buyNow.bind(this, this.props.idcode) },
					React.createElement("i", { className: "fa fa-shopping-cart" }),
					" Buy Now"
				),
				this.addtocartButton()
			) : React.createElement(
				"div",
				{ className: "notifymeWrap" },
				React.createElement(
					"span",
					{ className: "btn btn-clear size-lg brandtextDanger" },
					"Out of Stock"
				),
				React.createElement(
					"button",
					{ className: "btn btn-healthmug size-lg pull-right", onClick: this.notifyMe },
					"Notify me"
				)
			)
		);
	}
});
var SoldOut = React.createClass({
	displayName: "SoldOut",

	getInitialState: function getInitialState() {
		return { notifystate: 0 };
	},
	notify: function notify(e) {
		$("#notifyform").addClass("validated");
		if ($("#notifyform")[0].checkValidity() == true) {
			var that = this;
			if (this.state.notifystate == 0 && (this.props.loggedin || this.refs.notify.value.length > 0)) {
				var email = "";
				if (typeof this.refs.notify !== "undefined") email = this.refs.notify.value;
				$.ajax({
					data: { variant_code: this.props.idcode, email: email },
					type: "POST",
					url: window.location.protocol + "//" + window.location.host + "/products/notify",
					success: function success(data) {
						that.setState({ notifystate: 1 });
					},
					error: function error(data) {
						alert("Could not notify");
					}
				});
			}
		}
		e.preventDefault();
	},
	render: function render() {
		return React.createElement(
			"div",
			null,
			this.props.stock < 1 ? React.createElement(
				"div",
				{ className: "soldOutInfo alignCenter" },
				React.createElement(
					"p",
					null,
					"This Product is Out of Stock"
				),
				React.createElement(
					"div",
					null,
					"Notify me when this product is available"
				),
				React.createElement(
					"div",
					{ className: "checkAvailability" },
					React.createElement(
						"form",
						{ id: "notifyform", className: "loginForm" },
						this.props.loggedin ? null : React.createElement("input", { ref: "notify", type: "email", placeholder: "Enter your valid Email", "aria-label": "Enter email to notify when available", required: true }),
						this.props.loggedin ? React.createElement(
							"button",
							{ onClick: this.notify, className: "btn" },
							"Notify Me"
						) : React.createElement(
							"button",
							{ onClick: this.notify, style: { margin: "0px" } },
							"Notify Me"
						)
					)
				),
				this.state.notifystate == 1 ? React.createElement(
					"h4",
					null,
					"Your email has been noted. We'll get back to you as soon as the product is in stock."
				) : null
			) : null
		);
	}
});

var ProductPageTrust = React.createClass({
	displayName: "ProductPageTrust",
	keyFeature: function keyFeature(ft) {
		if (ft == "safeBuy") {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink: href="/css/svgsprite.svg#cash-wallet"></use></svg></div> <h5>Safe Buy</h5> <hr /> <p>Safe & secure buy. 100% money Back guarantee </p>');
		} else if (ft == "liveEasy") {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink:href="/css/svgsprite.svg#return"></use></svg></div><h5>Live Easy</h5><hr/><p>Guaranteed Refunds / Returns available within 15 days of delivery</p>');
		} else {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink:href="/css/svgsprite.svg#quality"></use></svg></div><h5>Genuine</h5><hr/><p>Genuine products guarantee. Free from expiry</p>');
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "productDetailSpecial" },
			React.createElement(
				"div",
				{ className: "productBrandImg" },
				React.createElement("img", { src: "https://static.oxinis.com/healthmug/image/brand/" + this.props.datalist.productinfo.brand.id + "-150.jpg", alt: this.props.datalist.productinfo.brand.name }),
				React.createElement("br", null),
				React.createElement(
					"a",
					{ href: this.props.datalist.breadcrumbs[1].link + "?brand=" + this.props.datalist.productinfo.brand.id, className: "brandtxtColor" },
					"More from ",
					this.props.datalist.productinfo.brand.name,
					" ",
					React.createElement("i", { className: "fa fa-angle-right" })
				)
			),
			React.createElement(
				"div",
				{ className: "secureShieldProductDetail" },
				React.createElement(
					"svg",
					null,
					React.createElement("use", { xlinkHref: "/css/svgsprite.svg#healthmug-shield" })
				),
				React.createElement(
					"div",
					null,
					"100% Secured & Trusted"
				)
			),
			React.createElement(
				"div",
				{ className: "productBoxKeyFeature" },
				React.createElement(
					"div",
					{ className: "keyFeatureBoxWrap" },
					React.createElement(
						"div",
						{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "safeBuy") },
						React.createElement(
							"div",
							null,
							React.createElement(
								"svg",
								null,
								React.createElement("use", { xlinkHref: "/css/svgsprite.svg#cash-wallet" })
							)
						),
						React.createElement(
							"span",
							null,
							"Safe Buy"
						)
					),
					React.createElement(
						"div",
						{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "liveEasy") },
						React.createElement(
							"div",
							null,
							React.createElement(
								"svg",
								null,
								React.createElement("use", { xlinkHref: "/css/svgsprite.svg#return" })
							)
						),
						React.createElement(
							"span",
							null,
							"Live Easy"
						)
					),
					React.createElement(
						"div",
						{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "genuine") },
						React.createElement(
							"div",
							null,
							React.createElement(
								"svg",
								null,
								React.createElement("use", { xlinkHref: "/css/svgsprite.svg#quality" })
							)
						),
						React.createElement(
							"span",
							null,
							"Genuine"
						)
					)
				)
			)
		);
	}
});

var MobileTabHeading = React.createClass({
	displayName: "MobileTabHeading",
	getInitialState: function getInitialState() {
		return { selectedtab: "" };
	},
	componentDidMount: function componentDidMount() {
		var active = "";
		var tabs = [];
		var position = 0;
		if (this.props.datalist.comboproducts.length > 0) {
			active = "combo";
			tabs.push({ id: "#comboProductListTitle", name: "combo", position: position });
			position += 1;
		}
		if (this.checkDescription()) {
			active = active == "" ? "description" : active;
			tabs.push({ id: "#description", name: "description", position: position });
			position += 1;
		}
		if (this.props.datalist.faq.length > 0) {
			active = active == "" ? "faq" : active;
			tabs.push({ id: "#FAQWrap", name: "faq", position: position });
			position += 1;
		}
		if (1 == 1) {
			active = active == "" ? "qa" : active;
			tabs.push({ id: "#QAWrap", name: "qa", position: position });
			position += 1;
		}
		if (this.props.datalist.similarproducts.length > 0) {
			active = active == "" ? "similar" : active;
			tabs.push({ id: "#similarProducts", name: "similar", position: position });
			position += 1;
		}
		if (!this.props.datalist.productinfo.prescription_required) {
			active = active == "" ? "review" : active;
			tabs.push({ id: "#reviewRating", name: "review", position: position });
			position += 1;
		}
		this.setState({ tabs: tabs, selectedtab: active });
		var that = this;
		$(window).scroll(function () {
			var currentpos = $(window).scrollTop();
			var activetab = tabs.filter(function (tab) {
				if (currentpos >= $(tab.id).offset().top - 67 && currentpos < $(tab.id).offset().top - 67 + $(tab.id).outerHeight()) return true;
			});
			if (activetab.length > 0 && that.state.selectedtab != activetab[0].name) {
				that.setState({ selectedtab: activetab[0].name });
				if (activetab[0].position > 2) $(".tabHeadingWrap>div").animate({ scrollLeft: (activetab[0].position - 1) * 100 }, 200);else $(".tabHeadingWrap>div").animate({ scrollLeft: 0 }, 200);
			}
		});
	},
	checkDescription: function checkDescription() {
		var info = this.props.datalist.productinfo;
		if (info.description != null && info.description != "" || info.other_names != null && info.other_names.length > 0 || info.properties.length > 0 || info.dimensions.weight > 0 || info.dimensions.length > 0 || info.terms != null && info.terms != "" || info.manufacturer_part_no != "") return true;else return false;
	},
	render: function render() {
		var activetab = this.state.selectedtab;
		return React.createElement(
			"div",
			{ className: "tabHeadingWrap" },
			React.createElement(
				"div",
				null,
				React.createElement(
					"div",
					{ className: "tabHeading" },
					this.props.datalist.comboproducts.length > 0 ? React.createElement(
						"span",
						{ className: activetab == "combo" ? "active smoothScroll" : "smoothScroll", "data-target": "#comboProductListTitle" },
						"Combos"
					) : null,
					this.checkDescription() ? React.createElement(
						"span",
						{ className: activetab == "description" ? "active smoothScroll" : "smoothScroll", "data-target": "#description" },
						"Details"
					) : null,
					this.props.datalist.faq.length > 0 ? React.createElement(
						"span",
						{ className: activetab == "faq" ? "active smoothScroll" : "smoothScroll", "data-target": "#FAQWrap" },
						"FAQ"
					) : null,
					React.createElement(
						"span",
						{ className: activetab == "qa" ? "active smoothScroll" : "smoothScroll", "data-target": "#QAWrap" },
						"Q&A"
					),
					this.props.datalist.similarproducts.length > 0 ? React.createElement(
						"span",
						{ className: activetab == "similar" ? "active smoothScroll" : "smoothScroll", "data-target": "#similarProducts" },
						"Similar"
					) : null,
					this.props.datalist.productinfo.prescription_required ? null : React.createElement(
						"span",
						{ className: activetab == "review" ? "active smoothScroll" : "smoothScroll", "data-target": "#reviewRating" },
						"Reviews"
					)
				)
			)
		);
	}
});

var SimilarCombo = React.createClass({
	displayName: "SimilarCombo",
	showDescription: function showDescription() {
		var show = false;
		var info = this.props.datalist.productinfo;
		if (info.description != null && info.description != "" || info.other_names != null && info.other_names.length > 0 || info.properties.length > 0 || info.dimensions.weight > 0 || info.dimensions.length > 0 || info.terms != null && info.terms != "" || info.manufacturer_part_no != "") show = true;
		return show;
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "similarProductComboOption" },
			this.props.mobile ? React.createElement(MobileTabHeading, { datalist: this.props.datalist, localdata: this.props.localdata }) : null,
			React.createElement(
				"div",
				{ className: "similarProductComboProductWrap" },
				React.createElement(
					"div",
					{ className: "similarProductComboProduct" },
					this.props.datalist.comboproducts.length > 0 ? React.createElement(ComboProductList, { products: this.props.datalist.comboproducts, selectedcombo: this.props.localdata.selectedcombo, datalist: this.props.datalist }) : null,
					this.props.datalist.diseases.length > 0 ? React.createElement(ProductUses, { diseases: this.props.datalist.diseases, selecteddisease: this.props.localdata.selecteddisease }) : null,
					this.showDescription() ? React.createElement(ProductDetailDescription, { productinfo: this.props.datalist.productinfo }) : null,
					this.props.datalist.faq.length > 0 ? React.createElement(FAQBlock, { faq: this.props.datalist.faq }) : null,
					React.createElement(QABlock, { datalist: this.props.datalist, localdata: this.props.localdata }),
					this.props.datalist.similarproducts.length > 0 && !this.props.datalist.productinfo.prescription_required ? React.createElement(SimilarProductList, { products: this.props.datalist.similarproducts }) : null,
					this.props.datalist.alternatebrands.length > 0 && this.props.datalist.productinfo.prescription_required ? React.createElement(AlternateBrands, { products: this.props.datalist.alternatebrands, mobile: this.props.mobile, idcode: this.props.datalist.productinfo.id_code }) : null,
					!this.props.datalist.productinfo.prescription_required ? React.createElement(RatingReviewBlock, { datalist: this.props.datalist }) : null
				)
			),
			this.props.mobile ? null : React.createElement(ComboResultBlock, { datalist: this.props.datalist, localdata: this.props.localdata })
		);
	}
});

var ComboProductList = React.createClass({
	displayName: "ComboProductList",

	mixins: [cartmixin],
	getInitialState: function getInitialState() {
		return { mobileview: true };
	},
	componentDidMount: function componentDidMount() {
		imageloadfade();
		if (window.matchMedia("(min-width: 1024px)").matches == true) {
			this.setState({ mobileview: false });
		}
	},
	clickHandle: function clickHandle(comboItem) {
		store.dispatch({ type: "comboupdate", data: comboItem.id });
	},
	buyCombo: function buyCombo() {
		gtag("event", "Add Combo");
		gtag("event", "add_to_cart", {
			value: this.comboSum().toString(),
			currency: "INR",
			items: [{
				id: this.props.datalist.productinfo.id_code,
				name: this.props.datalist.productinfo.name,
				category: this.props.datalist.breadcrumbs.map(function (crumb) {
					return crumb.name;
				}).toString(),
				brand: this.props.datalist.productinfo.brand.name,
				quantity: 1
			}]
		});
		fbq("track", "AddToCart", {
			content_name: this.props.datalist.productinfo.name,
			content_category: this.props.datalist.breadcrumbs.map(function (crumb) {
				return crumb.name;
			}).toString(),
			content_type: "product",
			content_ids: this.props.selectedcombo,
			value: this.comboSum(),
			currency: "INR",
			brand: this.props.datalist.productinfo.brand.name
		});
		this.addtocart(this.props.datalist.productinfo.id_code);
		this.props.selectedcombo.map(function (item) {
			this.addtocart(item);
		}, this);

		this.loadcart(true);
	},
	comboSum: function comboSum() {
		var sum = 0;
		for (var i = 0; i < this.props.selectedcombo.length; i++) {
			var item = this.props.selectedcombo[i];
			sum += this.props.datalist.comboproducts.filter(function (product) {
				return product.id == item;
			})[0].price;
		}
		return sum;
	},
	render: function render() {
		var info = this.props.datalist.productinfo;
		var combosum = this.comboSum();
		return React.createElement(
			"div",
			null,
			this.state.mobileview == true ? React.createElement("h2", { className: "groupTitle", id: "comboProductListTitle" }) : React.createElement(
				"h2",
				{ className: "groupTitle", id: "comboProductListTitle" },
				"Frequently Bought Together"
			),
			React.createElement(
				"div",
				{ className: "similarProductWrap" },
				React.createElement(
					"div",
					{ className: "productRow comboProductWrap", id: "comboProducts" },
					React.createElement(
						"div",
						{ className: info.quantity > 0 ? "productBox" : "productBox soldout" },
						React.createElement(
							"span",
							{ className: "imgMainSoldOut" },
							"Sold Out"
						),
						this.state.mobileview == true ? React.createElement(
							"h2",
							{ className: "groupTitle" },
							"Frequently Bought Together"
						) : null,
						React.createElement(
							"div",
							null,
							React.createElement(
								"div",
								{ className: "productImg" },
								React.createElement(
									"div",
									null,
									React.createElement("img", {
										src: "https://static.oxinis.com/healthmug/image/product/" + info.images[0] + "-150.jpg",
										srcSet: "https://static.oxinis.com/healthmug/image/product/" + info.images[0] + "-400.jpg 2x",
										alt: info.name
									})
								)
							),
							React.createElement(
								"p",
								{ className: "productTitle" },
								info.name
							)
						),
						this.state.mobileview == true ? null : React.createElement(
							"div",
							{ className: "productData" },
							React.createElement(
								"div",
								{ className: "productBoxPrice" },
								React.createElement(
									"p",
									null,
									info.mrp !== info.price ? React.createElement(
										"span",
										{ className: "productBoxMRP" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										info.mrp
									) : null,
									React.createElement(
										"span",
										{ className: "productBoxSellingPrice" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										info.price
									),
									info.mrp !== info.price ? React.createElement(
										"span",
										{ className: "productBoxDiscount" },
										Math.round((info.mrp - info.price) / info.mrp * 100) + "%"
									) : null
								)
							)
						)
					),
					this.props.products.map(function (comboItem, i) {
						return React.createElement(
							"div",
							{ className: "productBox smoothScroll", "data-target": "#comboProductListTitle", key: i },
							React.createElement(
								"div",
								{ className: "chkWrap", onClick: this.clickHandle.bind(this, comboItem) },
								this.props.selectedcombo.indexOf(comboItem.id) >= 0 ? React.createElement(
									"div",
									{ className: "chk checked" },
									React.createElement(
										"svg",
										null,
										React.createElement("use", { xlinkHref: "/css/svgsprite.svg#chk-check" })
									)
								) : React.createElement(
									"div",
									{ className: "chk" },
									React.createElement(
										"svg",
										null,
										React.createElement("use", { xlinkHref: "/css/svgsprite.svg#chk-add" })
									)
								)
							),
							React.createElement(
								"a",
								{ href: comboItem.url, target: "_blank" },
								React.createElement(
									"div",
									{ className: "productImg" },
									React.createElement(
										"div",
										null,
										React.createElement("img", {
											src: "https://static.oxinis.com/healthmug/image/product/" + comboItem.images[0] + "-150.jpg",
											srcSet: "https://static.oxinis.com/healthmug/image/product/" + comboItem.images[0] + "-400.jpg 2x",
											alt: comboItem.name
										})
									)
								),
								React.createElement(
									"p",
									{ className: "productTitle" },
									comboItem.name
								)
							),
							React.createElement(
								"div",
								{ className: "productData" },
								React.createElement(
									"div",
									{ className: "productBoxPrice" },
									comboItem.mrp !== comboItem.price ? React.createElement(
										"span",
										{ className: "productBoxMRP" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										comboItem.mrp
									) : null,
									React.createElement(
										"span",
										{ className: "productBoxSellingPrice" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										comboItem.price
									),
									comboItem.mrp !== comboItem.price ? React.createElement(
										"span",
										{ className: "productBoxDiscount" },
										Math.round((comboItem.mrp - comboItem.price) / comboItem.mrp * 100) + "%"
									) : null
								)
							)
						);
					}, this)
				)
			),
			React.createElement(
				"div",
				{ className: "comboPriceBoxWrap" },
				React.createElement(
					"div",
					{ className: "comboPriceBox" },
					React.createElement(
						"label",
						null,
						"1 Item"
					),
					React.createElement(
						"span",
						null,
						React.createElement("i", { className: "fa fa-rupee" }),
						" ",
						info.price
					)
				),
				React.createElement(
					"div",
					{ className: "comboPriceBox addons" },
					React.createElement(
						"label",
						null,
						this.props.selectedcombo.length,
						" Addons"
					),
					React.createElement(
						"span",
						null,
						React.createElement("i", { className: "fa fa-rupee" }),
						" ",
						combosum
					)
				),
				React.createElement(
					"div",
					{ className: "comboPriceBox combolTotal" },
					React.createElement(
						"label",
						null,
						"Total"
					),
					React.createElement(
						"span",
						null,
						React.createElement("i", { className: "fa fa-rupee" }),
						" ",
						combosum + info.price
					)
				),
				React.createElement(
					"button",
					{ onClick: this.buyCombo, className: "btn btn-healthmug size-lg" },
					"Add Combo to Cart"
				)
			)
		);
	}
});

var ProductDetailDescription = React.createClass({
	displayName: "ProductDetailDescription",
	getInitialState: function getInitialState() {
		return { shortdescription: false };
	},
	viewMore: function viewMore() {
		this.setState({ shortdescription: false });
	},
	componentDidMount: function componentDidMount() {
		if (window.matchMedia("(max-width: 768px)").matches == true && $("#description").height() > 700) this.setState({ shortdescription: true });
	},
	render: function render() {
		var info = this.props.productinfo;
		return React.createElement(
			"div",
			{ id: "description" },
			React.createElement(
				"h2",
				{ className: "groupTitle" },
				"Description"
			),
			React.createElement(
				"div",
				{ className: "boxWhite productDetailDesc" },
				React.createElement(
					"div",
					{ className: this.state.shortdescription ? "productDetailShort" : "productDetailFull" },
					info.other_names != null && info.other_names.length > 0 ? React.createElement(
						"div",
						null,
						React.createElement(
							"h2",
							null,
							"Also known as"
						),
						React.createElement(
							"p",
							null,
							info.other_names.join(", ")
						)
					) : null,
					info.properties.length > 0 || info.dimensions.weight > 0 || info.dimensions.length > 0 || info.manufacturer_part_no != "" ? React.createElement(
						"div",
						null,
						React.createElement(
							"h2",
							null,
							"Properties"
						),
						React.createElement(
							"div",
							{ className: "properties" },
							info.properties.map(function (item, i) {
								if (item.parent != "Diseases" && item.values.length > 0) return React.createElement(
									"div",
									{ className: "propertyRow", key: i },
									React.createElement(
										"div",
										{ className: "propertyLable" },
										item.parent
									),
									item.type == 1 ? React.createElement(
										"div",
										{ className: "propertyValue" },
										item.values.join(", ")
									) : React.createElement(
										"div",
										{ className: "propertyValue" },
										React.createElement(
											"ul",
											null,
											item.values.map(function (value) {
												return React.createElement(
													"li",
													null,
													value
												);
											})
										)
									)
								);
							}, this),
							info.dimensions.weight > 0 ? React.createElement(
								"div",
								{ className: "propertyRow" },
								React.createElement(
									"div",
									{ className: "propertyLable" },
									"Weight"
								),
								React.createElement(
									"div",
									{ className: "propertyValue" },
									info.dimensions.weight + " (gms)"
								)
							) : null,
							info.dimensions.length > 0 ? React.createElement(
								"div",
								{ className: "propertyRow" },
								React.createElement(
									"div",
									{ className: "propertyLable" },
									"Dimensions"
								),
								React.createElement(
									"div",
									{ className: "propertyValue" },
									info.dimensions.length + " (cm) x " + info.dimensions.width + " (cm) x " + info.dimensions.height + " (cm)"
								)
							) : null,
							info.manufacturer_part_no != "" ? React.createElement(
								"div",
								{ className: "propertyRow" },
								React.createElement(
									"div",
									{ className: "propertyLable" },
									"Manufacturer ID"
								),
								React.createElement(
									"div",
									{ className: "propertyValue" },
									info.manufacturer_part_no
								)
							) : null
						)
					) : null,
					React.createElement("div", { dangerouslySetInnerHTML: { __html: info.description } }),
					info.terms != null && info.terms != "" ? React.createElement(
						"div",
						null,
						React.createElement(
							"h2",
							null,
							"Terms and Conditions"
						),
						React.createElement(
							"p",
							null,
							info.terms
						)
					) : null
				),
				this.state.shortdescription ? React.createElement(
					"div",
					{ className: "btnfullDetailWrap" },
					React.createElement(
						"a",
						{ className: "brandtxtColor", onClick: this.viewMore },
						"View More"
					)
				) : null
			)
		);
	}
});

var SimilarProductList = React.createClass({
	displayName: "SimilarProductList",
	componentDidMount: function componentDidMount() {
		imageloadfade();
		if (window.matchMedia("(min-width: 1024px)").matches == true) {
			var item = window.innerWidth > 1711 ? 6 : 5;
			var navvar = false;
			if (this.props.products.length > 5) navvar = true;
			$("#similarProductCarousel>.productRow").owlCarousel({
				items: item,
				itemsCustom: false,
				itemsDesktop: [980, 3],
				dots: false,

				// Navigation
				nav: navvar,
				navText: ["<i className='fa fa-angle-left'></i>", "<i className='fa fa-angle-right'></i>"],
				loop: true,
				slideBy: item
			});
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			null,
			React.createElement(
				"h2",
				{ className: "groupTitle", id: "similarProducts" },
				"Similar Products"
			),
			React.createElement(
				"div",
				{ className: "similarProductWrap", id: "similarProductCarousel" },
				React.createElement(
					"div",
					{ className: "productRow owl-carousel owl-theme owl-loaded" },
					this.props.products.map(function (product, i) {
						return React.createElement(
							"div",
							{ className: "productBox wavelet", key: i },
							React.createElement(
								"a",
								{ href: product.link, title: product.name },
								React.createElement(
									"div",
									{ className: "productImgWrap" },
									React.createElement(
										"div",
										{ className: "productImg" },
										React.createElement(
											"div",
											null,
											React.createElement("img", {
												src: "https://static.oxinis.com/healthmug/image/product/" + product.images[0] + "-150.jpg",
												srcSet: "https://static.oxinis.com/healthmug/image/product/" + product.images[0] + "-400.jpg 2x",
												alt: product.name
											})
										)
									),
									product.prescription_required ? React.createElement(
										"div",
										{ className: "rxWrap" },
										React.createElement(
											"svg",
											null,
											React.createElement("use", { xlinkHref: "/css/svgsprite.svg#rx" })
										)
									) : null
								),
								React.createElement(
									"p",
									{ className: "productTitle" },
									product.name
								)
							),
							React.createElement(
								"div",
								{ className: "productData" },
								product.rating > 0 ? React.createElement(
									"div",
									{ className: "avrgRating" },
									React.createElement("span", { className: "gray-star" }),
									React.createElement("span", { className: "yellow-star", style: { width: product.rating * 100 / 5 + "%" } })
								) : React.createElement("div", { className: "avrgRating" }),
								React.createElement(
									"div",
									{ className: "productBoxPrice" },
									product.mrp !== product.price ? React.createElement(
										"span",
										{ className: "productBoxMRP" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										product.mrp
									) : null,
									React.createElement(
										"span",
										{ className: "productBoxSellingPrice" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										product.price
									),
									product.mrp !== product.price ? React.createElement(
										"span",
										{ className: "productBoxDiscount" },
										Math.round((product.mrp - product.price) / product.mrp * 100) + "%"
									) : null
								)
							)
						);
					}, this)
				)
			)
		);
	}
});

var AlternateBrands = React.createClass({
	displayName: "AlternateBrands",
	getInitialState: function getInitialState() {
		return { pageno: 2, showclick: false };
	},
	componentDidMount: function componentDidMount() {
		imageloadfade();
		if (window.matchMedia("(min-width: 1024px)").matches == true) {
			var item = window.innerWidth > 1711 ? 6 : 5;
			var navvar = false;
			if (this.props.products.length > 5) navvar = true;
			$("#alternateBrandsCarousel>.productRow").owlCarousel({
				items: item,
				itemsCustom: false,
				itemsDesktop: [980, 3],
				dots: false,

				// Navigation
				nav: navvar,
				navText: ["<i className='fa fa-angle-left'></i>", "<i className='fa fa-angle-right'></i>"],
				loop: true,
				slideBy: item
			});
		}
	},
	moreAlternateBrands: function moreAlternateBrands(idcode) {
		nanobar.go(50);
		if (!this.state.showclick) {
			this.setState({ showclick: true });
			var that = this;
			$.ajax({
				url: window.location.protocol + "//" + window.location.host + "/products/getalternatebrands",
				type: "POST",
				data: { idcode: idcode, pageno: this.state.pageno, pagesize: 10 },
				success: function success(data) {
					that.setState({ showclick: false, pageno: that.state.pageno + 1 });
					store.dispatch({ type: "append_alternatebrands", data: data });
					nanobar.go(100);
				},
				error: function error(data) {
					alert(data.message);
					that.setState({ showclick: false });
					nanobar.go(100);
				}
			});
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			null,
			React.createElement(
				"h2",
				{ className: "groupTitle", id: "alternateBrands" },
				"Alternate Brands"
			),
			React.createElement(
				"div",
				{ className: "similarProductWrap", id: "alternateBrandsCarousel" },
				this.props.mobile == true ? React.createElement(
					"div",
					{ className: "alternateBrandRow" },
					this.props.products.map(function (product, i) {
						return React.createElement(
							"a",
							{ href: product.url, title: product.name, key: i, className: "wavelet" },
							React.createElement(
								"span",
								{ className: "productTitle" },
								product.name
							),
							React.createElement(
								"span",
								{ className: "tagline" },
								product.tagline
							),
							React.createElement(
								"span",
								{ className: "priceWrap" },
								product.mrp !== product.price ? React.createElement(
									"span",
									{ className: "productBoxMRP" },
									React.createElement("i", { className: "fa fa-rupee" }),
									" ",
									product.mrp
								) : null,
								React.createElement(
									"span",
									{ className: "productBoxSellingPrice" },
									React.createElement("i", { className: "fa fa-rupee" }),
									" ",
									product.price
								),
								product.mrp !== product.price ? React.createElement(
									"span",
									{ className: "productBoxDiscount" },
									Math.round((product.mrp - product.price) / product.mrp * 100) + "%"
								) : null
							)
						);
					}, this),
					React.createElement(
						"div",
						{ className: "alignCenter", style: { padding: "10px" } },
						this.props.products[0].total_count > this.props.products.length ? React.createElement(
							"button",
							{ onClick: this.moreAlternateBrands.bind(this, this.props.idcode), className: "btn btn-md btn-healthmug btnLoader" },
							"Show More",
							this.state.showclick ? React.createElement(
								"div",
								{ className: "productLoader", style: { display: "inline-block" } },
								React.createElement(
									"div",
									null,
									React.createElement(
										"div",
										null,
										React.createElement(
											"svg",
											null,
											React.createElement("use", { xlinkHref: "/css/svgsprite.svg#loader" })
										)
									)
								)
							) : null
						) : null
					)
				) : React.createElement(
					"div",
					{ className: "productRow owl-carousel owl-theme owl-loaded" },
					this.props.products.map(function (product, i) {
						return React.createElement(
							"div",
							{ className: "productBox wavelet", key: i },
							React.createElement(
								"a",
								{ href: product.url, title: product.name },
								React.createElement(
									"div",
									{ className: "productImgWrap" },
									React.createElement(
										"div",
										{ className: "productImg" },
										React.createElement(
											"div",
											null,
											React.createElement("img", {
												src: "https://static.oxinis.com/healthmug/image/product/" + product.images[0] + "-150.jpg",
												srcSet: "https://static.oxinis.com/healthmug/image/product/" + product.images[0] + "-400.jpg 2x",
												alt: product.name
											})
										)
									),
									product.prescription_required ? React.createElement(
										"div",
										{ className: "rxWrap" },
										React.createElement(
											"svg",
											null,
											React.createElement("use", { xlinkHref: "/css/svgsprite.svg#rx" })
										)
									) : null
								),
								React.createElement(
									"p",
									{ className: "productTitle" },
									product.name
								),
								React.createElement(
									"p",
									{ className: "productTitle" },
									product.tagline
								)
							),
							React.createElement(
								"div",
								{ className: "productData" },
								React.createElement(
									"div",
									{ className: "productBoxPrice" },
									product.mrp !== product.price ? React.createElement(
										"span",
										{ className: "productBoxMRP" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										product.mrp
									) : null,
									React.createElement(
										"span",
										{ className: "productBoxSellingPrice" },
										React.createElement("i", { className: "fa fa-rupee" }),
										" ",
										product.price
									),
									product.mrp !== product.price ? React.createElement(
										"span",
										{ className: "productBoxDiscount" },
										Math.round((product.mrp - product.price) / product.mrp * 100) + "%"
									) : null
								)
							)
						);
					}, this)
				)
			),
			React.createElement("div", { className: "reviewRatingWrap" })
		);
	}
});

var ComboResultBlock = React.createClass({
	displayName: "ComboResultBlock",

	mixins: [cartmixin],
	componentDidMount: function componentDidMount() {
		imageloadfade();
	},
	buyNow: function buyNow(idcode) {
		gtag("event", "add_to_cart", {
			value: this.props.datalist.productinfo.price.toString(),
			currency: "INR",
			items: [{
				id: idcode.toString(),
				name: this.props.datalist.productinfo.name,
				category: this.props.datalist.breadcrumbs.map(function (crumb) {
					return crumb.name;
				}).toString(),
				brand: this.props.datalist.productinfo.brand.name,
				quantity: 1
			}]
		});
		fbq("track", "AddToCart", {
			content_name: this.props.datalist.productinfo.name,
			content_category: this.props.datalist.breadcrumbs.map(function (crumb) {
				return crumb.name;
			}).toString(),
			content_type: "product",
			content_ids: [idcode.toString()],
			value: this.props.datalist.productinfo.price,
			currency: "INR",
			brand: this.props.datalist.productinfo.brand.name
		});
		this.redirecttocheckout(idcode);
	},
	render: function render() {
		var info = this.props.datalist.productinfo;
		return React.createElement(
			"div",
			{ className: "combosWrap", id: "ComboProductBlock" },
			React.createElement(
				"div",
				{ className: "combosWrapInner" },
				React.createElement(
					"div",
					{ className: info.quantity > 0 ? "productBox" : "productBox soldout" },
					React.createElement(
						"span",
						{ className: "imgMainSoldOut" },
						"Sold Out"
					),
					React.createElement(
						"a",
						null,
						React.createElement(
							"div",
							{ className: "productImg" },
							React.createElement(
								"div",
								null,
								React.createElement("img", {
									src: "https://static.oxinis.com/healthmug/image/product/" + info.images[0] + "-150.jpg",
									srcSet: "https://static.oxinis.com/healthmug/image/product/" + info.images[0] + "-400.jpg 2x",
									title: info.name,
									alt: info.name
								})
							)
						),
						React.createElement(
							"div",
							{ className: "productTitleWrap" },
							React.createElement(
								"p",
								{ className: "productTitle" },
								info.name
							),
							this.props.datalist.ratings.ratingcount > 0 ? React.createElement(
								"div",
								{ className: "avrgRating" },
								React.createElement("span", { className: "gray-star" }),
								React.createElement("span", { className: "yellow-star", style: { width: this.props.datalist.ratings.avgrating * 20 + "%" } })
							) : null
						)
					),
					React.createElement(
						"div",
						{ className: "productData" },
						React.createElement(
							"div",
							{ className: "productBoxPrice" },
							React.createElement(
								"p",
								null,
								info.mrp !== info.price ? React.createElement(
									"span",
									{ className: "productBoxMRP" },
									React.createElement("i", { className: "fa fa-rupee" }),
									" ",
									info.mrp
								) : null,
								React.createElement(
									"span",
									{ className: "productBoxSellingPrice" },
									React.createElement("i", { className: "fa fa-rupee" }),
									" ",
									info.price
								),
								info.mrp !== info.price ? React.createElement(
									"span",
									{ className: "productBoxDiscount" },
									Math.round((info.mrp - info.price) / info.mrp * 100),
									"%"
								) : null
							)
						)
					),
					info.quantity > 0 ? React.createElement(
						"p",
						{ style: { marginBottom: "10px" } },
						React.createElement(
							"button",
							{ className: "btn btn-block btn-healthmug", onClick: this.buyNow.bind(this, info.id_code) },
							"Buy Now"
						)
					) : null
				)
			)
		);
	}
});

var RatingReviewBlock = React.createClass({
	displayName: "RatingReviewBlock",
	getInitialState: function getInitialState() {
		return { page: 1, starfilter: 0, typefilter: "helpful", showloader: false, showbtnloader: false };
	},
	reloadData: function reloadData(type) {
		var that = this;
		$.ajax({
			url: window.location.protocol + "//" + window.location.host + "/products/loadreview",
			data: { idcode: this.props.datalist.productinfo.id_code, page: this.state.page, starfilter: this.state.starfilter, typefilter: this.state.typefilter },
			type: "POST",
			success: function success(reviewdata) {
				store.dispatch({ type: "reviewreload", data: JSON.parse(reviewdata), mode: type });
				init_images();
				that.setState({ showloader: false, showbtnloader: false });
			},
			error: function error(data) {
				alert(data.responseText);
				that.setState({ showloader: false, showbtnloader: false });
			}
		});
	},
	onStarClick: function onStarClick(rating) {
		this.setState({ page: 1, starfilter: rating, showloader: true }, this.reloadData);
	},
	onTypeClick: function onTypeClick(type) {
		this.setState({ page: 1, typefilter: type, showloader: true }, this.reloadData);
	},
	onPageChange: function onPageChange() {
		this.setState({ page: this.state.page + 1, showbtnloader: true }, function () {
			this.reloadData("append");
		});
	},
	giveReview: function giveReview() {
		if (this.props.datalist.loggedin) {
			window.location = "/review/product/" + this.props.datalist.productinfo.id_code;
		} else {
			accountLogin("signin", "/review/product/" + this.props.datalist.productinfo.id_code);
		}
	},
	render: function render() {
		var maxrating = this.props.datalist.ratings.ratingcount > 0 ? this.props.datalist.ratings.rating.reduce(function (a, b) {
			return Math.max(a, b);
		}) : 0;
		return React.createElement(
			"div",
			{ className: "reviewRatingWrap", id: "reviewRating" },
			React.createElement(
				"h2",
				{ className: "groupTitle" },
				"Ratings & Reviews"
			),
			React.createElement(
				"div",
				{ className: "boxWhite" },
				this.props.datalist.ratings.ratingcount > 0 ? React.createElement(
					"div",
					{ className: "row reviewRatingTop" },
					this.state.showloader ? React.createElement(
						"div",
						{ className: "circleLoader", style: { display: "inline-block" } },
						React.createElement(
							"div",
							null,
							React.createElement(
								"div",
								null,
								React.createElement(
									"svg",
									null,
									React.createElement("use", { xlinkHref: "/css/svgsprite.svg#loader" })
								)
							)
						)
					) : null,
					React.createElement(
						"div",
						{ className: "col-xs-12 col-sm-7" },
						React.createElement(
							"div",
							{ className: "row" },
							React.createElement(
								"div",
								{ className: "col-sm-5 col-xs-12" },
								React.createElement(
									"div",
									{ className: "avrgRatingWrap" },
									React.createElement(
										"div",
										null,
										this.props.datalist.ratings.avgrating,
										React.createElement(
											"span",
											null,
											"/5"
										)
									),
									React.createElement(
										"span",
										{ className: "avrgRating" },
										React.createElement("span", { className: "yellow-star", style: { width: this.props.datalist.ratings.avgrating * 20 + "%" } }),
										React.createElement("span", { className: "gray-star" })
									),
									React.createElement("br", null),
									React.createElement(
										"p",
										null,
										this.props.datalist.ratings.ratingcount,
										" ",
										this.props.datalist.ratings.ratingcount > 1 ? "Ratings" : "Rating",
										" &",
										" ",
										this.props.datalist.reviews.reviewcount,
										" ",
										this.props.datalist.reviews.reviewcount == 1 ? "Review" : "Reviews"
									)
								)
							),
							React.createElement(
								"div",
								{ className: "col-xs-12 col-sm-7" },
								React.createElement(
									"div",
									{ className: "ratingSpread" },
									React.createElement(
										"a",
										{ onClick: this.onStarClick.bind(this, 5), className: this.state.starfilter == 5 ? "active" : null },
										React.createElement(
											"span",
											null,
											"5 ",
											React.createElement("i", { className: "fa fa-star" })
										),
										React.createElement(
											"div",
											{ className: "bar" },
											React.createElement("div", { className: "progress good", style: { width: this.props.datalist.ratings.rating[0] * 100 / maxrating + "%" } })
										),
										React.createElement(
											"label",
											null,
											this.props.datalist.ratings.rating[0]
										)
									),
									React.createElement(
										"a",
										{ onClick: this.onStarClick.bind(this, 4), className: this.state.starfilter == 4 ? "active" : null },
										React.createElement(
											"span",
											null,
											"4 ",
											React.createElement("i", { className: "fa fa-star" })
										),
										React.createElement(
											"div",
											{ className: "bar" },
											React.createElement("div", { className: "progress good", style: { width: this.props.datalist.ratings.rating[1] * 100 / maxrating + "%" } }),
											" "
										),
										React.createElement(
											"label",
											null,
											this.props.datalist.ratings.rating[1]
										)
									),
									React.createElement(
										"a",
										{ onClick: this.onStarClick.bind(this, 3), className: this.state.starfilter == 3 ? "active" : null },
										React.createElement(
											"span",
											null,
											"3 ",
											React.createElement("i", { className: "fa fa-star" })
										),
										React.createElement(
											"div",
											{ className: "bar" },
											React.createElement("div", { className: "progress good", style: { width: this.props.datalist.ratings.rating[2] * 100 / maxrating + "%" } }),
											" "
										),
										React.createElement(
											"label",
											null,
											this.props.datalist.ratings.rating[2]
										)
									),
									React.createElement(
										"a",
										{ onClick: this.onStarClick.bind(this, 2), className: this.state.starfilter == 2 ? "active" : null },
										React.createElement(
											"span",
											null,
											"2 ",
											React.createElement("i", { className: "fa fa-star" })
										),
										React.createElement(
											"div",
											{ className: "bar" },
											React.createElement("div", { className: "progress bad", style: { width: this.props.datalist.ratings.rating[3] * 100 / maxrating + "%" } }),
											" "
										),
										React.createElement(
											"label",
											null,
											this.props.datalist.ratings.rating[3]
										)
									),
									React.createElement(
										"a",
										{ onClick: this.onStarClick.bind(this, 1), className: this.state.starfilter == 1 ? "active" : null },
										React.createElement(
											"span",
											null,
											"1 ",
											React.createElement("i", { className: "fa fa-star" })
										),
										React.createElement(
											"div",
											{ className: "bar" },
											React.createElement("div", { className: "progress worst", style: { width: this.props.datalist.ratings.rating[4] * 100 / maxrating + "%" } }),
											" "
										),
										React.createElement(
											"label",
											null,
											this.props.datalist.ratings.rating[4]
										)
									)
								)
							)
						)
					),
					React.createElement(
						"div",
						{ className: "col-xs-12 col-sm-5" },
						React.createElement(
							"div",
							{ className: "wantReview" },
							React.createElement(
								"p",
								null,
								"Share your thoughts with other customers"
							),
							React.createElement(
								"div",
								null,
								React.createElement(
									"a",
									{ onClick: this.giveReview, className: "btn btn-md btn-healthmug" },
									"Rate and Review Product"
								)
							)
						)
					)
				) : React.createElement(
					"div",
					{ className: "emptyBox alignCenter" },
					React.createElement(
						"p",
						null,
						"Be the first to Rate & Review this product"
					),
					React.createElement(
						"div",
						null,
						React.createElement(
							"a",
							{ onClick: this.giveReview, className: "btn btn-md btn-healthmug" },
							"Rate and Review Product"
						)
					)
				),
				this.props.datalist.reviews.reviewcount > 0 ? React.createElement(
					"div",
					{ className: "reivewWrap" },
					React.createElement(
						"div",
						{ className: "reviewsTitle" },
						React.createElement(
							"div",
							{ className: "reviewsFilter" },
							React.createElement(
								"a",
								{ onClick: this.onTypeClick.bind(this, "helpful"), className: this.state.typefilter == "helpful" ? "active" : null },
								"Most Helpful"
							),
							React.createElement(
								"a",
								{ onClick: this.onTypeClick.bind(this, "positive"), className: this.state.typefilter == "positive" ? "active" : null },
								"Positive"
							),
							React.createElement(
								"a",
								{ onClick: this.onTypeClick.bind(this, "negative"), className: this.state.typefilter == "negative" ? "active" : null },
								"Negative"
							),
							React.createElement(
								"a",
								{ onClick: this.onTypeClick.bind(this, "recent"), className: this.state.typefilter == "recent" ? "active" : null },
								"Recent"
							)
						)
					),
					this.state.starfilter > 0 ? React.createElement(
						"div",
						{ className: "filterNote", onClick: this.onStarClick.bind(this, 0) },
						"Showing results with ",
						this.state.starfilter,
						React.createElement("i", { className: "fa fa-star" }),
						" rating. ",
						React.createElement(
							"span",
							{ className: "brandtxtColor" },
							"Show all"
						)
					) : null,
					this.props.datalist.reviews.review.length == 0 ? React.createElement(
						"div",
						{ className: "emptyReviewMsg" },
						React.createElement(
							"div",
							null,
							"No reviews in this category"
						)
					) : React.createElement(
						"div",
						{ className: "reivews" },
						React.createElement(
							"div",
							{ className: "container" },
							this.props.datalist.reviews.review.map(function (review, i) {
								return React.createElement(
									"div",
									{ className: "row", key: i },
									React.createElement(
										"div",
										{ className: "col-xs-12 reviewContent" },
										React.createElement(
											"span",
											{ className: "avrgRating" },
											React.createElement("span", { className: "yellow-star", style: { width: review.rating * 20 + "%" } }),
											React.createElement("span", { className: "gray-star" })
										),
										review.verified_buyer ? React.createElement(
											"span",
											{ className: "certifyBuyerIcon" },
											React.createElement(
												"span",
												null,
												React.createElement(
													"svg",
													null,
													React.createElement("use", { xlinkHref: "/css/svgsprite.svg#shield" })
												)
											),
											" ",
											"Verified Buyer"
										) : null,
										React.createElement(
											"h3",
											null,
											review.title,
											React.createElement(
												"span",
												null,
												"by ",
												review.customer_name,
												" on ",
												review.date
											)
										),
										React.createElement(
											"p",
											null,
											review.description
										)
									)
								);
							})
						),
						React.createElement("br", null),
						this.props.datalist.reviews.reviewcount <= this.props.datalist.reviews.review.length ? null : React.createElement(
							"div",
							{ className: "alignCenter" },
							React.createElement(
								"button",
								{ onClick: this.onPageChange, className: "btn btn-md btn-healthmug btnLoader" },
								"Show More Reviews",
								this.state.showbtnloader ? React.createElement(
									"div",
									{ className: "productLoader", style: { display: "inline-block" } },
									React.createElement(
										"div",
										null,
										React.createElement(
											"div",
											null,
											React.createElement(
												"svg",
												null,
												React.createElement("use", { xlinkHref: "/css/svgsprite.svg#loader" })
											)
										)
									)
								) : null
							)
						)
					)
				) : null
			)
		);
	}
});

var FAQBlock = React.createClass({
	displayName: "FAQBlock",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "productDetailFAQWrap", id: "FAQWrap" },
			React.createElement(
				"h2",
				{ className: "groupTitle" },
				"Frequently Asked Questions (FAQs)"
			),
			this.props.faq.length > 0 ? React.createElement(
				"div",
				{ className: "boxWhite" },
				this.props.faq.map(function (item, i) {
					return React.createElement(
						"div",
						{ className: "productFAQ", key: i },
						React.createElement(
							"div",
							{ className: "qAIcon" },
							"Q"
						),
						React.createElement(
							"p",
							{ className: "question" },
							item.question
						),
						React.createElement(
							"p",
							{ className: "answer" },
							item.answer
						)
					);
				}, this)
			) : null
		);
	}
});
var QABlock = React.createClass({
	displayName: "QABlock",
	getInitialState: function getInitialState() {
		return { showloader: false };
	},
	giveAnswer: function giveAnswer(questionid) {
		if (this.props.datalist.loggedin) {
			store.dispatch({ type: "answerquestion", data: questionid });
			$("[data-remodal-id=modalWriteAnswer]").remodal({ hashTracking: false }).open();
		} else {
			accountLogin();
		}
	},
	loadQuestions: function loadQuestions(productid) {
		var that = this;
		this.setState({ showloader: true });
		$.ajax({
			url: window.location.protocol + "//" + window.location.host + "/products/loadallquestions",
			data: { id_code: productid, pagesize: this.props.localdata.pagesize, pageno: this.props.localdata.pageno + 1 },
			type: "POST",
			success: function success(data) {
				store.dispatch({ type: "loadquestions", data: JSON.parse(data) });
				that.setState({ showloader: false });
			},
			error: function error(data) {
				alert(data.responseText);
				that.setState({ showloader: false });
			}
		});
	},
	askQuestion: function askQuestion() {
		if (this.props.datalist.loggedin) {
			$("[data-remodal-id=modalWriteQuestion]").remodal({ hashTracking: false }).open();
		} else {
			accountLogin();
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "QAWrap", id: "QAWrap" },
			React.createElement(
				"h2",
				{ className: "groupTitle" },
				"Questions & Answers",
				" ",
				this.props.datalist.qa.total_count > 0 ? React.createElement(
					"span",
					{ className: "btn size-sm btn-healthmug pull-right", onClick: this.askQuestion },
					"Ask Question"
				) : null
			),
			React.createElement(
				"div",
				{ className: "boxWhite" },
				this.props.datalist.qa.total_count == 0 ? React.createElement(
					"div",
					{ className: "emptyBox alignCenter" },
					React.createElement(
						"p",
						null,
						"Have a question about this product?"
					),
					React.createElement(
						"a",
						{ className: "btn btn-md btn-healthmug", onClick: this.askQuestion },
						"Be the first to ask a Question"
					)
				) : React.createElement(
					"div",
					null,
					React.createElement(
						"div",
						{ className: "filterTab" },
						React.createElement(
							"div",
							{ className: "filterTabTitle flowL" },
							React.createElement(
								"span",
								{ className: "filterTabTitleStyle1" },
								"Total Questions ",
								React.createElement(
									"span",
									{ className: "qCount" },
									this.props.datalist.qa.total_count
								)
							)
						),
						React.createElement(
							"div",
							{ className: "filterTabTitle flowR" },
							React.createElement(
								"span",
								{ className: "filterTabTitleStyle1" },
								"Have a question about this product?",
								" ",
								React.createElement(
									"a",
									{ className: "brandtxtColor", onClick: this.askQuestion },
									"Ask Here"
								)
							)
						)
					),
					this.props.datalist.qa.questions.map(function (question, i) {
						return React.createElement(
							"div",
							{ key: i, className: question.answers.length > 0 ? "qARowWrap haveAnswer" : "qARowWrap" },
							React.createElement(
								"div",
								{ className: "qARow" },
								React.createElement(
									"div",
									{ className: "qAIcon" },
									"Q"
								),
								React.createElement(
									"div",
									{ className: "qAContent" },
									React.createElement(
										"p",
										{ className: "question" },
										React.createElement(
											"span",
											null,
											question.question
										),
										" ",
										React.createElement(
											"a",
											{ className: "brandtxtColor", onClick: this.giveAnswer.bind(this, question.id) },
											"Reply to this Question"
										)
									)
								)
							),
							question.answers.length > 0 ? React.createElement(
								"div",
								{ className: "qARow" },
								React.createElement(
									"div",
									{ className: "qAIcon" },
									"A"
								),
								React.createElement(
									"div",
									{ className: "qAContent" },
									question.answers.map(function (answer, k) {
										return React.createElement(
											"p",
											{ className: "answer", key: k },
											answer.answer,
											React.createElement(
												"span",
												{ className: "answerBy" },
												"by ",
												answer.cust_name,
												" on ",
												answer.created_date
											)
										);
									}, this)
								)
							) : null
						);
					}, this),
					this.props.datalist.qa.total_count <= this.props.datalist.qa.questions.length ? null : React.createElement(
						"div",
						{ className: "showAllQA" },
						React.createElement(
							"button",
							{ type: "button", className: "btn btn-healthmugBorder btnLoader", onClick: this.loadQuestions.bind(this, this.props.datalist.productinfo.id_code) },
							"Load More Questions",
							this.state.showloader ? React.createElement(
								"div",
								{ className: "productLoader", style: { display: "inline-block" } },
								React.createElement(
									"div",
									null,
									React.createElement(
										"div",
										null,
										React.createElement(
											"svg",
											null,
											React.createElement("use", { xlinkHref: "/css/svgsprite.svg#loader" })
										)
									)
								)
							) : null
						)
					)
				)
			)
		);
	}
});

var ModalAnswerForm = React.createClass({
	displayName: "ModalAnswerForm",
	getInitialState: function getInitialState() {
		return { answered: false, submitted: false };
	},
	saveAnswer: function saveAnswer() {
		$("#answerform").addClass("validated");
		if ($("#answerform")[0].checkValidity() == true && this.state.answered == false) {
			var that = this;
			this.setState({ answered: true });
			$.ajax({
				data: { question_id: this.props.localdata.questionid, answer: this.refs.answer.value },
				type: "POST",
				url: window.location.protocol + "//" + window.location.host + "/products/answerquestion",
				success: function success(data) {
					that.setState({ submitted: true });
					that.setState({ answered: false });
				},
				error: function error(data) {
					that.setState({ answered: false });
					alert("There was a problem.\nCould not submit your answer.");
				}
			});
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "modalSizeMD", "data-remodal-id": "modalWriteAnswer", style: { backgroundColor: "#F4F4F4" } },
			React.createElement(
				"div",
				{ className: !this.state.submitted ? "remodalTitle" : "remodalTitle noBorder" },
				!this.state.submitted ? React.createElement(
					"div",
					null,
					"Help others by giving answer!"
				) : null,
				React.createElement("button", { "data-remodal-action": "close", className: "remodal-close" })
			),
			React.createElement(
				"div",
				{ className: "remodalBody" },
				!this.state.submitted ? React.createElement(
					"form",
					{ id: "answerform", className: "qAForm loginForm" },
					React.createElement(
						"div",
						{ className: "form-horizontal" },
						React.createElement(
							"div",
							{ className: "form-group" },
							React.createElement(
								"label",
								{ className: "col-xs-12 col-sm-3 control-label qlabel" },
								"Question"
							),
							React.createElement(
								"div",
								{ className: "col-xs-12 col-sm-8" },
								React.createElement(
									"p",
									{ className: "questionTobeAnswer" },
									this.props.localdata.questionid ? this.props.datalist.qa.questions.filter(function (question) {
										return question.id == this.props.localdata.questionid;
									}, this)[0].question : null
								)
							)
						),
						React.createElement(
							"div",
							{ className: "form-group" },
							React.createElement(
								"label",
								{ className: "col-xs-12 col-sm-3 control-label" },
								"Your Answer"
							),
							React.createElement(
								"div",
								{ className: "col-xs-12 col-sm-8" },
								React.createElement("textarea", {
									ref: "answer",
									type: "text",
									className: "form-control",
									rows: "10",
									cols: "5",
									placeholder: "Please make sure your answer is to the point and elaborate.",
									required: true
								})
							)
						)
					)
				) : React.createElement(
					"div",
					{ className: "alertContent alignCenter" },
					React.createElement(
						"div",
						{ className: "msgH1" },
						"Your answer has been submitted successfully."
					),
					React.createElement(
						"div",
						{ className: "msgP" },
						"We thank you for your support and time."
					)
				)
			),
			React.createElement(
				"div",
				{ className: "remodalFooter" },
				!this.state.submitted ? React.createElement(
					"button",
					{ className: "btn btn-healthmug", onClick: this.saveAnswer },
					"Submit"
				) : null,
				" ",
				" ",
				React.createElement(
					"button",
					{ className: "btn btn-default btn-healthmugBorder", "data-remodal-action": "close" },
					!this.state.submitted ? "Cancel" : "Ok"
				)
			)
		);
	}
});

var ModalQuestionForm = React.createClass({
	displayName: "ModalQuestionForm",
	getInitialState: function getInitialState() {
		return { asked: false, submitted: false };
	},
	saveQuestion: function saveQuestion() {
		$("#questionform").addClass("validated");
		if ($("#questionform")[0].checkValidity() == true && this.state.asked == false) {
			var that = this;
			this.setState({ asked: true });
			$.ajax({
				data: { idcode: this.props.idcode, question: this.refs.question.value },
				type: "POST",
				url: window.location.protocol + "//" + window.location.host + "/products/askquestion",
				success: function success(data) {
					that.setState({ submitted: true });
				},
				error: function error(data) {
					that.setState({ asked: false });
					alert("There was a problem.\nCould not submit your question.");
				}
			});
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "modalSizeMD", "data-remodal-id": "modalWriteQuestion", style: { backgroundColor: "#F4F4F4" } },
			React.createElement(
				"div",
				{ className: "remodalTitle noBorder" },
				React.createElement("button", { "data-remodal-action": "close", className: "remodal-close" })
			),
			React.createElement(
				"div",
				{ className: "remodalBody" },
				!this.state.submitted ? React.createElement(
					"form",
					{ id: "questionform", className: "qAForm loginForm" },
					React.createElement(
						"div",
						{ className: "form-horizontal" },
						React.createElement(
							"div",
							{ className: "form-group" },
							React.createElement(
								"label",
								{ className: "col-xs-12 col-sm-3 control-label lblYourQuestion" },
								"Your Question"
							),
							React.createElement(
								"div",
								{ className: "col-xs-12 col-sm-8" },
								React.createElement("textarea", {
									ref: "question",
									type: "text",
									className: "form-control",
									rows: "3",
									cols: "5",
									placeholder: "Please make sure your question is to the point and elaborate.",
									required: true
								})
							)
						)
					)
				) : React.createElement(
					"div",
					{ className: "alertContent alignCenter" },
					React.createElement(
						"div",
						{ className: "msgH1" },
						"Your question has been submitted successfully"
					),
					React.createElement(
						"div",
						{ className: "msgP" },
						"The answer to your question will be shown on the product page after our experts or customers answer them."
					),
					React.createElement(
						"div",
						{ className: "msgP" },
						"You can also track your question and its answers in your account."
					)
				)
			),
			React.createElement(
				"div",
				{ className: "remodalFooter" },
				!this.state.submitted ? React.createElement(
					"button",
					{ className: "btn btn-healthmug", onClick: this.saveQuestion },
					"Submit"
				) : null,
				" ",
				React.createElement(
					"button",
					{ className: "btn btn-default btn-healthmugBorder", "data-remodal-action": "close" },
					!this.state.submitted ? "Cancel" : "Ok"
				)
			)
		);
	}
});

var NotifyMobileModal = React.createClass({
	displayName: "NotifyMobileModal",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "modalSizeMD modalSoldOut", "data-remodal-id": "notifyMeModal", style: { backgroundColor: "#F4F4F4" } },
			React.createElement(
				"div",
				{ className: "remodalTitle" },
				React.createElement("button", { "data-remodal-action": "close", className: "remodal-close" })
			),
			React.createElement(
				"div",
				{ className: "remodalBody" },
				React.createElement(SoldOut, { stock: this.props.datalist.productinfo.quantity, idcode: this.props.datalist.productinfo.id_code })
			)
		);
	}
});

var PageFooter = React.createClass({
	displayName: "PageFooter",
	keyFeature: function keyFeature(ft) {
		if (ft == "safeBuy") {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink: href="/css/svgsprite.svg#cash-wallet"></use></svg></div> <h5>Safe Buy</h5> <hr /> <p>Safe & secure buy. 100% money Back guarantee </p>');
		} else if (ft == "liveEasy") {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink: href="/css/svgsprite.svg#return"></use></svg></div> <h5>Live Easy</h5> <hr /> <p>Guaranteed Refunds / Returns available within 15 days of delivery</p>');
		} else {
			$("[data-remodal-id=keyFeatureModal]").remodal({ hashTracking: false }).open();
			$("#featureContent").html('<div className="keyFeatureIcon"><svg><use xlink:href="/css/svgsprite.svg#quality"></use></svg></div><h5>Genuine</h5><hr/><p>Genuine products guarantee. Free from expiry</p>');
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "pageFooter" },
			React.createElement(
				"div",
				{ className: "supportLinks" },
				React.createElement(
					"a",
					{ href: "tel:7838389846" },
					React.createElement("i", { className: "fa fa-phone" }),
					" Call Us"
				),
				React.createElement(
					"a",
					{ href: "mailto:customer-care@healthmug.com" },
					React.createElement("i", { className: "fa fa-envelope" }),
					" Email us"
				)
			),
			React.createElement(
				"div",
				{ className: "keyFeatureBoxWrap" },
				React.createElement(
					"div",
					{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "safeBuy") },
					React.createElement(
						"div",
						null,
						React.createElement(
							"svg",
							null,
							React.createElement("use", { xlinkHref: "/css/svgsprite.svg#cash-wallet" })
						)
					),
					React.createElement(
						"span",
						null,
						"Safe Buy"
					)
				),
				React.createElement(
					"div",
					{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "liveEasy") },
					React.createElement(
						"div",
						null,
						React.createElement(
							"svg",
							null,
							React.createElement("use", { xlinkHref: "/css/svgsprite.svg#return" })
						)
					),
					React.createElement(
						"span",
						null,
						"Live Easy"
					)
				),
				React.createElement(
					"div",
					{ className: "keyFeatureBox", onClick: this.keyFeature.bind(this, "genuine") },
					React.createElement(
						"div",
						null,
						React.createElement(
							"svg",
							null,
							React.createElement("use", { xlinkHref: "/css/svgsprite.svg#quality" })
						)
					),
					React.createElement(
						"span",
						null,
						"Genuine"
					)
				)
			)
		);
	}
});

var MobileSocialShare = React.createClass({
	displayName: "MobileSocialShare",
	socialShare: function socialShare(network) {
		var winTop = screen.height / 2 - 350 / 2;
		var winLeft = screen.width / 2 - 520 / 2;
		var share_url = "";
		if (network == "fb") {
			gtag("event", "share", {
				method: "Facebook",
				content_type: "product",
				content_id: this.props.info.id_code.toString()
			});
			share_url = "https://www.facebook.com/dialog/share?app_id=145634995501895&display=popup&hashtag=%23Healthmug&href=" + window.location.href;
		} else if (network == "tw") {
			gtag("event", "share", {
				method: "Twitter",
				content_type: "product",
				content_id: this.props.info.id_code.toString()
			});
			share_url = "https://twitter.com/intent/tweet?text=Checkout " + this.props.info.name + " on Healthmug.com. " + window.location.href;
		}
		window.open(share_url, "sharer", "top=" + winTop + ",left=" + winLeft + ",toolbar=0,status=0,width=520,height=350");
	},
	render: function render() {
		return React.createElement(
			"div",
			{ className: "socialShareMobile" },
			React.createElement(
				"span",
				{ className: "productDetailShare" },
				React.createElement("a", { onClick: this.socialShare.bind(this, "fb"), className: "fa fa-facebook socialIcon" }),
				" ",
				React.createElement("a", { onClick: this.socialShare.bind(this, "tw"), className: "fa fa-twitter socialIcon" }),
				" "
			)
		);
	}
});

var ProductBoxKeyFeatureModal = React.createClass({
	displayName: "ProductBoxKeyFeatureModal",
	render: function render() {
		return React.createElement(
			"div",
			{ className: "modalSizeMD keyFeatureModal", "data-remodal-id": "keyFeatureModal", style: { backgroundColor: "#F4F4F4" } },
			React.createElement(
				"div",
				null,
				React.createElement(
					"div",
					{ className: "remodalTitle" },
					React.createElement("button", { "data-remodal-action": "close", className: "remodal-close" })
				),
				React.createElement(
					"div",
					{ className: "remodalBody" },
					React.createElement(
						"div",
						{ className: "container" },
						React.createElement(
							"div",
							{ className: "row" },
							React.createElement(
								"div",
								{ className: "col-xs-12" },
								React.createElement("div", { className: "keyFeatureModalContent", id: "featureContent" })
							)
						)
					)
				)
			)
		);
	}
});

var ProductUses = React.createClass({
	displayName: "ProductUses",
	componentDidMount: function componentDidMount() {
		var showcount = window.matchMedia("(min-width: 600px)").matches ? 4 : 3;
		var showdots = this.props.diseases.length > showcount;
		$("#productUses").owlCarousel({
			lazyLoad: true,
			slideSpeed: 300,
			items: showcount,
			loop: false,
			margin: 0,
			nav: false,
			dots: showdots
		});
	},
	showModal: function showModal(disease_id) {
		this.removeImage(disease_id);
		store.dispatch({ type: "selectdisease", data: disease_id });
		$("[data-remodal-id=productUsesModal]").remodal({ hashTracking: false }).open();
	},
	removeImage: function removeImage(disease_id) {
		var placeholder = document.querySelector("#diseaseModalImg");
		if (placeholder != null && disease_id != this.props.selecteddisease) {
			var small = placeholder.querySelector(".smallImg");
			small.classList.remove("loaded");

			var big = placeholder.querySelector(":not(.smallImg)");
			placeholder.removeChild(big);
		}
	},
	render: function render() {
		return React.createElement(
			"div",
			null,
			React.createElement(
				"h2",
				{ className: "groupTitle" },
				"Useful in"
			),
			React.createElement(
				"div",
				{ className: "productUsesWrap" },
				React.createElement(
					"div",
					{ className: "productUsesRow", id: "productUses" },
					this.props.diseases.map(function (disease, i) {
						return React.createElement(
							"div",
							{ className: "productUsesBox", onClick: this.showModal.bind(this, disease.id), key: i },
							React.createElement(
								"div",
								{ className: "diseaseImg" },
								React.createElement("img", { alt: disease.name, src: "https://static.oxinis.com/healthmug/image/disease/" + disease.id + "-225.jpg" })
							),
							React.createElement(
								"p",
								{ className: "diseaseName" },
								React.createElement(
									"span",
									null,
									disease.name
								)
							)
						);
					}, this)
				)
			)
		);
	}
});

var ProductUsesModal = React.createClass({
	displayName: "ProductUsesModal",
	imageLoad: function imageLoad() {
		var placeholder = document.querySelector("#diseaseModalImg");
		placeholder.querySelector(".smallImg").classList.add("loaded");

		var imgLarge = new Image();
		imgLarge.src = placeholder.dataset.large;
		imgLarge.onload = function () {
			imgLarge.classList.add("loaded");
		};
		placeholder.appendChild(imgLarge);
	},
	render: function render() {
		var disease = this.props.diseases.filter(function (disease) {
			return disease.id == this.props.disease;
		}, this);
		return React.createElement(
			"div",
			{ className: "productUsesModal", "data-remodal-id": "productUsesModal", style: { backgroundColor: "transparent", maxWidth: "480px" } },
			React.createElement(
				"div",
				{ className: "remodalBody" },
				disease.length > 0 ? React.createElement(
					"div",
					{ className: "diseaseDetailTop" },
					React.createElement(
						"div",
						{ className: "diseaseImg", id: "diseaseModalImg", "data-large": "https://static.oxinis.com/healthmug/image/disease/" + disease[0].id + "-480.jpg" },
						React.createElement("img", { onLoad: this.imageLoad, src: "https://static.oxinis.com/healthmug/image/disease/" + disease[0].id + "-30.jpg", alt: disease[0].name, className: "smallImg" })
					),
					React.createElement("button", { "data-remodal-action": "close", className: "remodal-close" }),
					React.createElement(
						"h2",
						null,
						disease[0].name
					),
					React.createElement(
						"div",
						{ className: "causeSymptomsList" },
						React.createElement(
							"h3",
							null,
							"Causes :"
						),
						React.createElement(
							"ul",
							null,
							disease[0].causes.map(function (cause, i) {
								return React.createElement(
									"li",
									{ key: i },
									cause
								);
							})
						),
						React.createElement(
							"h3",
							null,
							"Symptoms :"
						),
						React.createElement(
							"ul",
							null,
							disease[0].symptoms.map(function (symptom, i) {
								return React.createElement(
									"li",
									{ key: i },
									symptom
								);
							})
						)
					)
				) : null
			)
		);
	}
});